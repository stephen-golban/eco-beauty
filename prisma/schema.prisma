// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Gender targeting for products
enum Gender {
  MEN
  WOMEN
  UNISEX
}

// Category model for flexible product categories (bags, shoes, skincare, etc.)
model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  image     String    // URL to category image
  slug      String    @unique
  products  Product[] // One-to-many
}

// Product model for all shop items
model Product {
  id            String          @id @default(cuid())
  name          String
  description   String
  price         Decimal         @db.Decimal(10, 2)
  images        String[]        // Array of image URLs
  categoryId    String
  category      Category        @relation(fields: [categoryId], references: [id])
  gender        Gender?         // Optional: for men/women/unisex
  ingredients   String[]        // Array of ingredients (for beauty products)
  benefits      String[]        // Array of product benefits (for beauty products)
  howToUse      String?         // Optional: for beauty products
  size          String?         // Product size/volume (optional)
  sku           String          @unique
  stock         Int             @default(0)
  isOrganic     Boolean?        @default(false)
  isVegan       Boolean?        @default(false)
  isCrueltyFree Boolean?        @default(false)
  rating        Decimal?        @db.Decimal(3, 2)
  isDeal        Boolean         @default(false) // Mark if this product is a deal
  dealLabel     String?         // e.g. "Sale", "Black Friday", "2-for-1"
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  wishlistUsers User[]          @relation("Wishlist")
  orderItems    OrderItem[]

  deals         Deal[]          // Many-to-many relation with Deal

  @@index([categoryId])
  @@index([sku])
  @@map("products")
}

// Deal model for advanced deals and promotions
model Deal {
  id          String     @id @default(cuid())
  label       String
  description String?
  startsAt    DateTime?
  endsAt      DateTime?
  products    Product[]  // Many-to-many
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

// User model for authentication and dashboard info
model User {
  id            String      @id @default(cuid())
  clerkId       String      @unique
  name          String
  email         String      @unique
  loyaltyPoints Int         @default(0)
  orders        Order[]
  wishlist      Product[]   @relation("Wishlist")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

// Order model for user orders
model Order {
  id          String      @id @default(cuid())
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  items       OrderItem[]
  total       Decimal     @db.Decimal(10, 2)
  status      String      // e.g., "pending", "completed"
  placedAt    DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

// Join table for Order and Product, with quantity and price at order time
model OrderItem {
  id        String   @id @default(cuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  image     String
  quantity  Int      @default(1)
  price     Decimal  @db.Decimal(10, 2) // price at the time of order
}
